name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  PYTHON_VERSION: 3.8
  HADOLINT_VERSION: "v1.16.3"
  VIRTUALENV_PIP: "20.2"

jobs:
  tox:
    name: Tox
    runs-on: ubuntu-latest
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2.3.4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install tox
        run: python3 -m pip install tox

      - name: Run tox
        run: tox

  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2.3.4

      - name: Run Hadolint
        run: |
          docker run --rm -i \
            -v $(pwd)/.hadolint.yaml:/.hadolint.yaml:ro \
            hadolint/hadolint:${{ env.HADOLINT_VERSION }} < Dockerfile

  test:
    name: Test wheels ${{ matrix.arch }}-python${{ matrix.python }}-alpine${{ matrix.alpine }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.8", "3.9"]
        alpine: ["3.11", "3.12", "3.13"]
        arch: ["aarch64", "armhf", "armv7", "amd64", "i386"]

    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v2.3.4

      - name: Write env-file
        shell: bash
        run: |
          (
            echo "GRPC_BUILD_WITH_BORING_SSL_ASM=false"
            echo "GRPC_PYTHON_BUILD_SYSTEM_OPENSSL=true"
            echo "GRPC_PYTHON_BUILD_WITH_CYTHON=true"
          ) > .env_file

      - name: Build wheels
        uses: ./
        with:
          tag: ${{ matrix.python }}-alpine${{ matrix.alpine }}
          arch: ${{ matrix.arch }}
          wheels-host: wheels.hass.io
          apk: "build-base;libffi-dev;openssl-dev"
          skip-binary: aiohttp
          env-file: True
          test: True
          requirements: "requirements_wheels_test.txt"
